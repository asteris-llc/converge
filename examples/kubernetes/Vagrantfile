# -*- mode: ruby -*-
# vi: set ft=ruby :

CONVERGE_LOCAL = "/tmp/converge-kubernetes/"
CONVERGE_VERSION = "0.4.0-beta1"
CONTROLLER_COUNT = 1
NODE_COUNT = 2
KUBELET_TOKEN = "chAng3m3"
ADMIN_TOKEN = "chAng3m3"
SCHEDULER_TOKEN = "chAng3m3"

def etcd_initial_cluster
  (1..CONTROLLER_COUNT).map { |i|
    "#{controller_host_name(i)}=https://#{controller_ip(i)}:2380"
  }.join(",")
end

def etcd_servers
  (1..CONTROLLER_COUNT).map { |i|
    "https://#{controller_ip(i)}:2379"
  }.join(",")
end

def api_servers
  (1..CONTROLLER_COUNT).map { |i|
    "https://#{controller_ip(i)}:6443"
  }.join(",")
end

def node_peers(node_ip)
  (1..NODE_COUNT).map { |i|
    node_ip(i)
  }.reject { |nip|
    nip == node_ip
  }
end

def create_ca
  puts "Installing converge locally..."
  system("mkdir -p #{CONVERGE_LOCAL}")
  system("curl -s get.converge.sh | bash -s - -d #{CONVERGE_LOCAL} -v #{CONVERGE_VERSION}")

  sudo_prefix = system("test -w /usr/local/bin") ? "" : "sudo "
  puts "Installing cfssl..."
  output = `#{sudo_prefix}#{File.join(CONVERGE_LOCAL, 'converge')} apply --local converge/cfssl.hcl 2>&1`
  success = $?.success?
  if !success
    puts "failed to install cfssl:"
    puts output
    exit 1
  end

  puts "Generating certificate authority..."
  output = `#{File.join(CONVERGE_LOCAL, 'converge')} apply --local converge/generate-ca.hcl 2>&1`
  success = $?.success?
  if !success
    puts "failed to generate certificate authority:"
    puts output
    exit 1
  end
end

def controller_host_name(num)
  "controller-#{num}"
end

def controller_ip(num)
  return "172.19.9.#{num+20}"
end

def node_ip(num)
  return "172.19.9.#{num+100}"
end

def controller_script
  params = <<EOF
{
  "etcd-initial-cluster": "#{etcd_initial_cluster}",
  "etcd-servers": "#{etcd_servers}",
  "kubelet-token": "#{KUBELET_TOKEN}",
  "admin-token": "#{ADMIN_TOKEN}",
  "scheduler-token": "#{SCHEDULER_TOKEN}"
}
EOF

<<EOF
converge apply --local \
         --paramsJSON='#{params}' \
         /vagrant/converge/cfssl.hcl \
         /vagrant/converge/certs.hcl \
         /vagrant/converge/docker.hcl \
         /vagrant/converge/etcd.hcl \
         /vagrant/converge/kubernetes-controller.hcl
EOF
end

def node_script(peers)
  params = <<EOF
{
  "controller-ip": "#{controller_ip(1)}",
  "api-servers": "#{api_servers}",
  "kubelet-token": "#{KUBELET_TOKEN}",
  "peers": "#{peers.join(' ')}"
}
EOF

<<EOF
converge apply --local \
         --paramsJSON='#{params}' \
         /vagrant/converge/cfssl.hcl \
         /vagrant/converge/certs.hcl \
         /vagrant/converge/docker.hcl \
         /vagrant/converge/cni.hcl \
         /vagrant/converge/weave.hcl \
         /vagrant/converge/kubernetes-node.hcl
EOF
end

create_ca unless File.exist?("./ssl/ca.tar.gz")

Vagrant.configure("2") do |config|
  config.vm.box = "ubuntu/xenial64"

  (1..CONTROLLER_COUNT).each do |i|
    config.vm.define "controller-#{i}" do |controller|
      controller.vm.provider "virtualbox" do |v|
        v.memory = 2048
        v.cpus = 2
      end
      controller.vm.hostname = "controller-#{i}"
      controller.vm.network :private_network, ip: controller_ip(i)
      controller.vm.provision :file, source: "./ssl/ca.tar.gz", destination: "/tmp/ca.tar.gz"
      controller.vm.provision :shell, inline: "curl get.converge.sh | bash -s - -v #{CONVERGE_VERSION}", privileged: true
      controller.vm.provision :shell, inline: controller_script, privileged: true
    end
  end

  (1..NODE_COUNT).each do |i|
    config.vm.define "node-#{i}" do |node|
      node.vm.provider "virtualbox" do |v|
        v.memory = 2048
        v.cpus = 2
      end
      nip = node_ip(i)
      node.vm.hostname = "node-#{i}"
      node.vm.network :private_network, ip: nip
      node.vm.provision :file, source: "./ssl/ca.tar.gz", destination: "/tmp/ca.tar.gz"
      node.vm.provision :shell, inline: "curl get.converge.sh | bash -s - -v #{CONVERGE_VERSION}", privileged: true
      node.vm.provision :shell, inline: node_script(node_peers(nip)), privileged: true
    end
  end
end
