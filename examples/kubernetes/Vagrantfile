# -*- mode: ruby -*-
# vi: set ft=ruby :

CONVERGE_CMD = "../../converge"
CONTROLLER_COUNT = 3
NODE_COUNT = 1

def etcd_initial_cluster
  (1..CONTROLLER_COUNT).map { |i|
    "#{controllerHostName(i)}=https://#{controllerIP(i)}:2380"
  }.join(",")
end

def etcd_servers
  (1..CONTROLLER_COUNT).map { |i|
    "https://#{controllerIP(i)}:2379"
  }.join(",")
end

def create_ca
  puts "Generating certificate authority..."
  output = `#{CONVERGE_CMD} apply --local converge/local.hcl 2>&1`
  success = $?.success?
  if !success
    puts "failed to generate certificate authority:"
    puts output
    exit 1
  end
end

def controllerHostName(num)
  "controller-#{num}"
end

def controllerIP(num)
  return "172.19.9.#{num+20}"
end

def nodeIP(num)
  return "172.19.9.#{num+100}"
end

$controller_script = <<SCRIPT
converge apply --local \
         --paramsJSON='{"etcd-initial-cluster": "#{etcd_initial_cluster}", "etcd-servers": "#{etcd_servers}"}' \
         /vagrant/converge/cfssl.hcl \
         /vagrant/converge/cfssljson.hcl \
         /vagrant/converge/certs.hcl \
         /vagrant/converge/etcd-cli.hcl \
         /vagrant/converge/etcdctl.hcl \
         /vagrant/converge/etcd.hcl \
         /vagrant/converge/kube-apiserver.hcl \
         /vagrant/converge/kube-controller-manager.hcl \
         /vagrant/converge/kube-scheduler.hcl \
         /vagrant/converge/kubectl.hcl \
         /vagrant/converge/kubernetes-controller.hcl
SCRIPT

$node_script = <<SCRIPT
converge apply --local /vagrant/converge/certs.hcl
SCRIPT

create_ca unless File.exist?("./ssl/ca.tar.gz")

Vagrant.configure("2") do |config|
  config.vm.box = "ubuntu/xenial64"

  (1..CONTROLLER_COUNT).each do |i|
    config.vm.define "controller-#{i}" do |controller|
      controller.vm.provider "virtualbox" do |v|
        v.memory = 2048
        v.cpus = 2
      end
      controller.vm.hostname = "controller-#{i}"
      controller.vm.network :private_network, ip: controllerIP(i)

      controller.vm.provision :file, source: "./ssl/ca.tar.gz", destination: "/tmp/ca.tar.gz"
      controller.vm.provision :shell, inline: "curl get.converge.sh | bash -", privileged: true
      controller.vm.provision :shell, inline: $controller_script, privileged: true
    end
  end

  # (1..NODE_COUNT).each do |i|
  #   config.vm.define "node-#{i}" do |node|
  #     node.vm.network :private_network, ip: nodeIP(i)
  #     node.vm.provision :file, source: "./ssl/ca.tar.gz", destination: "/tmp/ca.tar.gz"
  #     node.vm.provision :shell, inline: "curl get.converge.sh | bash -", privileged: true
  #     node.vm.provision :shell, inline: $node_script, privileged: true
  #   end
  # end
end
